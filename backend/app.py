# app.py (–Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞)
# -*- coding: utf-8 -*-
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
load_dotenv()
# -*- coding: utf-8 -*- # –£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
import logging
import asyncio
import re
import urllib.parse
import sqlite3
from typing import List, Dict, Optional
from flask import Flask, request, jsonify, send_from_directory, abort
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, WebAppInfo
from telegram.ext import Application, CommandHandler, ContextTypes
# from telegram.error import Forbidden, TimedOut # –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
from bs4 import BeautifulSoup
import aiohttp
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
import time
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import hypercorn.asyncio
from hypercorn.config import Config
import os
import uuid # –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
from werkzeug.utils import secure_filename # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
import pytz # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –≤ APScheduler
from datetime import datetime # –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# --> –õ–£–ß–®–ê–Ø –ü–†–ê–ö–¢–ò–ö–ê: –ó–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è <--
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN", "YOUR_FALLBACK_TOKEN") # –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
WEB_APP_URL = os.environ.get("WEB_APP_URL", "https://YOUR_APP_DOMAIN/mini-app") # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ URL –≤–∞—à–µ–≥–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
DATABASE_NAME = os.environ.get("DATABASE_NAME", "ads.db") # –ò–º—è —Ñ–∞–π–ª–∞ –ë–î
UPLOAD_FOLDER = 'uploads' # –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp'} # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞ (—Ç–∞–∫–∂–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0"
REQUEST_TIMEOUT = 15 # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω
PARSE_INTERVAL = 30 # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
KUFAR_LIMIT = 7 # –õ–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ö—É—Ñ–∞—Ä–∞ –∑–∞ —Ä–∞–∑
ONLINER_LIMIT = 7 # –õ–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –û–Ω–ª–∞–π–Ω–µ—Ä–∞ –∑–∞ —Ä–∞–∑
SELENIUM_WAIT_TIMEOUT = 15 # –¢–∞–π–º–∞—É—Ç –¥–ª—è —è–≤–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π Selenium (—É–≤–µ–ª–∏—á–µ–Ω)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
if TELEGRAM_TOKEN == "YOUR_FALLBACK_TOKEN":
    logger.warning("TELEGRAM_TOKEN –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
if WEB_APP_URL == "https://YOUR_APP_DOMAIN/mini-app":
     logger.warning("WEB_APP_URL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
CITIES = { # –°–ª–æ–≤–∞—Ä—å –≥–æ—Ä–æ–¥–æ–≤
    "minsk": "üèôÔ∏è –ú–∏–Ω—Å–∫", "brest": "üåá –ë—Ä–µ—Å—Ç", "grodno": "üåÉ –ì—Ä–æ–¥–Ω–æ",
    "gomel": "üåÜ –ì–æ–º–µ–ª—å", "vitebsk": "üèô –í–∏—Ç–µ–±—Å–∫", "mogilev": "üèûÔ∏è –ú–æ–≥–∏–ª–µ–≤",
}
# URL –¥–ª—è –û–Ω–ª–∞–π–Ω–µ—Ä–∞ - –±–∞–∑–æ–≤—ã–µ, —Ñ–∏–ª—å—Ç—Ä—ã –ª—É—á—à–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ UI/API Selenium
ONLINER_CITY_URLS = {
    "minsk": "https://r.onliner.by/ak/apartments", # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞—Ä–µ–Ω–¥—ã
}

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    # –í–ù–ò–ú–ê–ù–ò–ï: DROP TABLE —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é.
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, Alembic) –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ö–µ–º—ã.
    logger.warning(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{DATABASE_NAME}'. –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã 'ads', –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å.")
    with sqlite3.connect(DATABASE_NAME) as conn:
        # conn.execute("DROP TABLE IF EXISTS ads") # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–£–ñ–ù–û —Å—Ç–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
        conn.execute("""
            CREATE TABLE IF NOT EXISTS ads (
                link TEXT PRIMARY KEY, -- –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á)
                source TEXT NOT NULL, -- –ò—Å—Ç–æ—á–Ω–∏–∫ (Kufar, Onliner, User)
                city TEXT NOT NULL, -- –ì–æ—Ä–æ–¥ (–∫–ª—é—á –∏–∑ CITIES)
                price INTEGER, -- –¶–µ–Ω–∞ –≤ USD
                rooms INTEGER, -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
                address TEXT, -- –ê–¥—Ä–µ—Å
                image TEXT, -- URL –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                description TEXT, -- –û–ø–∏—Å–∞–Ω–∏–µ
                status TEXT DEFAULT 'approved' CHECK(status IN ('approved', 'pending', 'rejected')), -- –°—Ç–∞—Ç—É—Å (–æ–¥–æ–±—Ä–µ–Ω–æ, –æ–∂–∏–¥–∞–µ—Ç, –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ)
                new INTEGER DEFAULT 0, -- –§–ª–∞–≥ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (1 - –Ω–æ–≤–æ–µ, 0 - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ)
                user_id TEXT, -- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–∏–≤—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ 'User')
                phone TEXT,   -- –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π 'User'
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP -- –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î
            )
        """)
        # --> –î–æ–±–∞–≤—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) <--
        # logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        # conn.execute("CREATE INDEX IF NOT EXISTS idx_ads_city_status ON ads (city, status);")
        # conn.execute("CREATE INDEX IF NOT EXISTS idx_ads_price ON ads (price);")
        # conn.execute("CREATE INDEX IF NOT EXISTS idx_ads_rooms ON ads (rooms);")
        # conn.execute("CREATE INDEX IF NOT EXISTS idx_ads_source_status ON ads (source, status);")
        # conn.execute("CREATE INDEX IF NOT EXISTS idx_ads_new_status ON ads (new, status);")
        # conn.execute("CREATE INDEX IF NOT EXISTS idx_ads_created_at ON ads (created_at DESC);") # –ò–Ω–¥–µ–∫—Å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ
        conn.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

init_db() # –í—ã–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

# --- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask ---
# –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏ –∏–∑ ../client/build (–ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–∏–ø—Ç–∞ Python)
static_folder_path = os.path.join(os.path.dirname(__file__), '..', 'client', 'build')
app = Flask(__name__, static_folder=static_folder_path, static_url_path='/')

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# --- –ü–∞—Ä—Å–µ—Ä—ã ---
class ApartmentParser: # –ü–∞—Ä—Å–µ—Ä Kufar
    @staticmethod
    async def fetch_ads(city: str, min_price: Optional[int] = None, max_price: Optional[int] = None, rooms: Optional[int] = None) -> List[Dict]:
        headers = {"User-Agent": USER_AGENT}
        results = []
        # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã –∫–≤–∞—Ä—Ç–∏—Ä
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –≥–æ—Ä–æ–¥–∞ –∏–∑ CITIES –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Ç–∏
        city_path = CITIES.get(city, "minsk").split(' ')[1].lower() # –†–µ–∑–µ—Ä–≤–Ω—ã–π –ú–∏–Ω—Å–∫, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
        base_url = f"https://re.kufar.by/l/{city_path}/snyat/kvartiru-dolgosrochno"

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        query_params = {"cur": "USD", "sort": "lst.d"} # –í–∞–ª—é—Ç–∞ USD, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)

        if rooms is not None: # Kufar –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É—Ç—å –¥–ª—è –∫–æ–º–Ω–∞—Ç
            base_url += f"/{rooms}k"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ü–µ–Ω—ã Kufar 'prc=r:min,max'
        price_filters = []
        if min_price is not None: price_filters.append(str(min_price))
        else: price_filters.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è '–æ—Ç' –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ '–¥–æ'
        if max_price is not None: price_filters.append(str(max_price))
        else: price_filters.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è '–¥–æ' –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ '–æ—Ç'

        if price_filters[0] or price_filters[1]: # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω min –∏–ª–∏ max
             query_params["prc"] = f"r:{price_filters[0]},{price_filters[1]}"

        url = f"{base_url}?{urllib.parse.urlencode(query_params, safe=':,')}"

        logger.info(f"–ó–∞–ø—Ä–æ—Å –æ–±—ä—è–≤–ª–µ–Ω–∏–π Kufar —Å URL: {url}")

        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(url, headers=headers, timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)) as response:
                    response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)
                    soup = BeautifulSoup(await response.text(), "html.parser")
                    # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                    ad_elements = soup.select("section > a[href^='https://re.kufar.by/vi/']")

                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(ad_elements)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Kufar –¥–ª—è {CITIES[city]}.")
                    count = 0
                    for ad in ad_elements:
                        if count >= KUFAR_LIMIT:
                            logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {KUFAR_LIMIT} –¥–ª—è Kufar ({CITIES[city]}).")
                            break
                        try:
                            link = ad.get("href", "")
                            if not link: continue # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏

                            # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∏
                            price = ApartmentParser._parse_price(ad)
                            room_count = ApartmentParser._parse_rooms(ad)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —É–∂–µ *–ø–æ—Å–ª–µ* –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                            # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º –∫–∞—Ä—Ç–æ—á–∫–∞–º
                            if ApartmentParser._check_filters(price, room_count, min_price, max_price, rooms):
                                results.append({
                                    "price": price,
                                    "rooms": room_count,
                                    "address": ApartmentParser._parse_address(ad),
                                    "link": link,
                                    "image": ApartmentParser._parse_image(ad),
                                    "description": ApartmentParser._parse_description(ad), # –û–ø–∏—Å–∞–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º
                                    "city": city, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –≥–æ—Ä–æ–¥–∞
                                    "source": "Kufar",
                                    "status": "approved", # –û–¥–æ–±—Ä–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞
                                    "new": 1 # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–∫—Ä–µ–π–ø–∏–Ω–≥–µ
                                })
                                count += 1
                        except Exception as e:
                            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Kufar: {e}", exc_info=False) # –£–±—Ä–∞–ª traceback –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –ª–æ–≥–æ–≤
            except aiohttp.ClientError as e:
                logger.error(f"HTTP –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Kufar –¥–ª—è {CITIES[city]}: {e}")
            except asyncio.TimeoutError:
                 logger.error(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Kufar –¥–ª—è {CITIES[city]}")
            except Exception as e:
                logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ/–ø–∞—Ä—Å–∏–Ω–≥–µ Kufar –¥–ª—è {CITIES[city]}: {e}", exc_info=True)

        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –≤–∞–ª–∏–¥–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π Kufar –¥–ª—è {CITIES[city]}.")
        return results

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ Kufar (—Å–µ–ª–µ–∫—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è!) ---
    @staticmethod
    def _parse_price(ad) -> Optional[int]:
        try:
            # –°–µ–ª–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
            price_element = ad.select_one("div > span[class^='styles_price__']")
            if price_element and "$" in price_element.text:
                price_str = re.sub(r"[^\d]", "", price_element.text)
                return int(price_str) if price_str else None
            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
            price_alt = ad.select_one("span[class*='--usd']")
            if price_alt:
                 price_str = re.sub(r"[^\d]", "", price_alt.text)
                 return int(price_str) if price_str else None
        except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—É Kufar: {e}")
        return None

    @staticmethod
    def _parse_rooms(ad) -> Optional[int]:
        try:
            # –°–µ–ª–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
            params_element = ad.select_one("div[class^='styles_parameters__']")
            if params_element:
                match = re.search(r"(\d+)[-\s]–∫–æ–º–Ω", params_element.text)
                if match:
                    return int(match.group(1))
                if "—Å—Ç—É–¥–∏—è" in params_element.text.lower():
                    return 0 # –ò–ª–∏ 1, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç—É–¥–∏–π
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç Kufar: {e}")
        return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å

    @staticmethod
    def _parse_address(ad) -> str:
         try:
             # –°–µ–ª–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
             address_element = ad.select_one("div[class^='styles_address__']")
             if address_element:
                 return address_element.text.strip()
         except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∞–¥—Ä–µ—Å Kufar: {e}")
         return "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω üè†"

    @staticmethod
    def _parse_image(ad) -> Optional[str]:
        try:
            image_element = ad.select_one("img[data-testid^='image-']")
            if image_element:
                src = image_element.get("data-src") or image_element.get("src")
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ URL –ø–æ—Ö–æ–∂ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
                if src and ("kufar.by" in src or src.startswith('http')):
                    return src
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Kufar: {e}")
        return None

    @staticmethod
    def _parse_description(ad) -> str:
         # –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∞–º–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –° –∫–∞—Ä—Ç–æ—á–∫–∏ –±–µ—Ä–µ–º —á—Ç–æ –µ—Å—Ç—å.
         try:
            desc_element = ad.select_one("div[class^='styles_body__']") # –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫/–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if desc_element:
                 return desc_element.text.strip()
         except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ Kufar: {e}")
         return "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ üìù" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä

    @staticmethod
    def _check_filters(price: Optional[int], rooms: Optional[int], min_price: Optional[int], max_price: Optional[int], target_rooms: Optional[int]) -> bool:
        # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ü–µ–Ω—ã –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if price is None:
             logger.debug("–§–∏–ª—å—Ç—Ä: –û—Ç–±—Ä–æ—à–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ü–µ–Ω—ã.")
             return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
        price_ok = True
        if min_price is not None and price < min_price: price_ok = False
        if max_price is not None and price > max_price: price_ok = False
        if not price_ok:
             logger.debug(f"–§–∏–ª—å—Ç—Ä: –û—Ç–±—Ä–æ—à–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ ${price} (–§–∏–ª—å—Ç—Ä: {min_price}-{max_price}).")
             return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–Ω–∞—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º –∞–∫—Ç–∏–≤–µ–Ω)
        rooms_ok = True
        if target_rooms is not None:
            if rooms is None: # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –∑–∞–¥–∞–Ω, –Ω–æ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã - –æ—Ç–±—Ä–æ—Å–∏—Ç—å
                rooms_ok = False
                logger.debug(f"–§–∏–ª—å—Ç—Ä: –û—Ç–±—Ä–æ—à–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Ç.–∫. —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º ({target_rooms}) –∞–∫—Ç–∏–≤–µ–Ω, –∞ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã.")
            elif rooms != target_rooms: # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ñ–∏–ª—å—Ç—Ä–æ–º - –æ—Ç–±—Ä–æ—Å–∏—Ç—å
                 rooms_ok = False
                 logger.debug(f"–§–∏–ª—å—Ç—Ä: –û—Ç–±—Ä–æ—à–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º {rooms} (–§–∏–ª—å—Ç—Ä: {target_rooms}).")

        return price_ok and rooms_ok


class OnlinerParser: # –ü–∞—Ä—Å–µ—Ä Onliner - –£–õ–£–ß–®–ï–ù —Å —è–≤–Ω—ã–º–∏ –æ–∂–∏–¥–∞–Ω–∏—è–º–∏ Selenium
    @staticmethod
    def fetch_ads(city: str, min_price: Optional[int] = None, max_price: Optional[int] = None, rooms: Optional[int] = None) -> List[Dict]:
        results = []
        base_url = "https://r.onliner.by/ak" # –ù–∞—á–∏–Ω–∞–µ–º —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞—Ä–µ–Ω–¥—ã
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Onliner –¥–ª—è {CITIES[city]} —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: —Ü–µ–Ω–∞=(${min_price}-${max_price}), –∫–æ–º–Ω–∞—Ç—ã={rooms}")

        chrome_options = Options()
        chrome_options.add_argument("--headless") # –ë–µ–∑–≥–æ–ª–æ–≤—ã–π —Ä–µ–∂–∏–º
        chrome_options.add_argument("--no-sandbox") # –ß–∞—Å—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
        chrome_options.add_argument("--disable-dev-shm-usage") # –ü—Ä–µ–æ–¥–æ–ª–µ–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
        chrome_options.add_argument(f"user-agent={USER_AGENT}")
        chrome_options.add_argument("--disable-gpu") # –ò–Ω–æ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –≤ headless —Ä–µ–∂–∏–º–µ
        chrome_options.add_argument("--window-size=1920,1080") # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞

        driver = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π driver
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium WebDriver...")
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=chrome_options)
            driver.get(base_url)
            logger.info(f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Onliner: {base_url}")

            # –Ø–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
            wait = WebDriverWait(driver, SELENIUM_WAIT_TIMEOUT)

            # --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ Selenium ---
            # –≠—Ç–∞ —á–∞—Å—Ç—å —Å–∏–ª—å–Ω–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML Onliner –∏ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
            # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—ã—á–Ω–æ –Ω–∞–¥–µ–∂–Ω–µ–µ.
            # –í–ê–ñ–ù–û: –°–µ–ª–µ–∫—Ç–æ—Ä—ã XPath/CSS –Ω–∏–∂–µ - —ç—Ç–æ –ü–†–ò–ú–ï–†–´, –∏—Ö –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å!

            # –ü—Ä–∏–º–µ—Ä: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¶–µ–Ω—ã
            if min_price is not None or max_price is not None:
                try:
                    logger.info("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω—ã...")
                    # –ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É/–æ–±–ª–∞—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω—ã
                    # –ü—Ä–∏–º–µ—Ä XPath, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä!
                    price_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//div[contains(@class, 'input-style__pseudo') and contains(., '–¶–µ–Ω–∞')] | //div[contains(@class, 'classifieds-filter-element__label') and contains(., '–¶–µ–Ω–∞')]")))
                    price_button.click()
                    logger.info("–ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –æ–±–ª–∞—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω—ã.")
                    await asyncio.sleep(0.7) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π

                    # –í–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
                    if min_price is not None:
                        # –ü—Ä–∏–º–µ—Ä XPath, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π!
                        min_price_input = wait.until(EC.visibility_of_element_located((By.XPATH, "//input[@data-bind='facet.value.from'] | //input[@placeholder='–æ—Ç']")))
                        min_price_input.clear()
                        min_price_input.send_keys(str(min_price))
                        logger.info(f"–í–≤–µ–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É: {min_price}")

                    # –í–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
                    if max_price is not None:
                        # –ü—Ä–∏–º–µ—Ä XPath, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π!
                        max_price_input = wait.until(EC.visibility_of_element_located((By.XPATH, "//input[@data-bind='facet.value.to'] | //input[@placeholder='–¥–æ']")))
                        max_price_input.clear()
                        max_price_input.send_keys(str(max_price))
                        logger.info(f"–í–≤–µ–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É: {max_price}")

                    # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã USD (–µ—Å–ª–∏ –Ω–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                    # –ü—Ä–∏–º–µ—Ä XPath, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π!
                    usd_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[contains(@class, 'radio_button') and text()='$']//parent::label | //label[contains(.,'$')]")))
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ USD
                    is_selected = False
                    try:
                        is_selected = usd_button.find_element(By.XPATH, ".//input").is_selected()
                    except NoSuchElementException:
                         # –ï—Å–ª–∏ input –Ω–µ –≤–Ω—É—Ç—Ä–∏ label, –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                         pass
                    if not is_selected:
                         usd_button.click()
                         logger.info("–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ USD.")
                    else:
                         logger.info("–í–∞–ª—é—Ç–∞ USD —É–∂–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞.")

                    await asyncio.sleep(0.7) # –ü–∞—É–∑–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤

                    # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Ü–µ–Ω—ã (–º–æ–∂–µ—Ç –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è)
                    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
                    # try:
                    #    header_element = driver.find_element(By.TAG_NAME, 'h1')
                    #    header_element.click()
                    #    logger.info("–ó–∞–∫—Ä—ã–ª–∏ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω (–∫–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É).")
                    # except: pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ

                except (TimeoutException, NoSuchElementException) as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã Onliner: {e}")
                except Exception as e:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω—ã Onliner: {e}", exc_info=True)

            # –ü—Ä–∏–º–µ—Ä: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ö–æ–º–Ω–∞—Ç
            if rooms is not None:
                try:
                    logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–º–Ω–∞—Ç ({rooms})...")
                    # –ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–º–Ω–∞—Ç
                    # –ü—Ä–∏–º–µ—Ä XPath, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π!
                    rooms_button_main = wait.until(EC.element_to_be_clickable((By.XPATH, "//div[contains(@class, 'input-style__pseudo') and contains(., '–∫–æ–º–Ω–∞—Ç')] | //div[contains(@class, 'classifieds-filter-element__label') and contains(., '–∫–æ–º–Ω–∞—Ç')]")))
                    rooms_button_main.click()
                    logger.info("–ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –æ–±–ª–∞—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–º–Ω–∞—Ç.")
                    await asyncio.sleep(0.7) # –ü–∞—É–∑–∞

                    # –ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å —á–µ–∫–±–æ–∫—Å/–∫–Ω–æ–ø–∫—É –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
                    # –¢—Ä–µ–±—É–µ—Ç—Å—è XPath –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∫–æ–º–Ω–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è '1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ')
                    # –ü—Ä–∏–º–µ—Ä XPath, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π! (–£—á—Ç–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É: 1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è, 2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ)
                    room_text = f"{rooms}-–∫–æ–º–Ω–∞—Ç–Ω" # –û–±—â–∞—è —á–∞—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
                    room_label_xpath = f"//label[contains(@class, 'checkbox-style__label') and contains(., '{room_text}')] | //label[contains(., '{room_text}')]"
                    room_checkbox = wait.until(EC.element_to_be_clickable((By.XPATH, room_label_xpath)))
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ
                    is_selected = False
                    try:
                        is_selected = room_checkbox.find_element(By.XPATH, ".//input").is_selected()
                    except NoSuchElementException: pass

                    if not is_selected:
                        room_checkbox.click()
                        logger.info(f"–ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è {rooms} –∫–æ–º–Ω–∞—Ç.")
                    else:
                         logger.info(f"–§–∏–ª—å—Ç—Ä –¥–ª—è {rooms} –∫–æ–º–Ω–∞—Ç —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω.")

                    await asyncio.sleep(0.7) # –ü–∞—É–∑–∞

                    # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç (–º–æ–∂–µ—Ç –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è)
                    # try:
                    #    header_element = driver.find_element(By.TAG_NAME, 'h1')
                    #    header_element.click()
                    #    logger.info("–ó–∞–∫—Ä—ã–ª–∏ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç (–∫–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É).")
                    # except: pass

                except (TimeoutException, NoSuchElementException) as e:
                     logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∫–æ–º–Ω–∞—Ç Onliner –¥–ª—è {rooms}: {e}")
                except Exception as e:
                     logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–º–Ω–∞—Ç Onliner: {e}", exc_info=True)

            # –ü—Ä–∏–º–µ—Ä: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ì–æ—Ä–æ–¥–∞
            # –ù–∞ Onliner —ç—Ç–æ —á–∞—Å—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É –∏–ª–∏ –ø–æ–∏—Å–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
            if city and city in CITIES: # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –∑–∞–¥–∞–Ω –∏ –≤–∞–ª–∏–¥–µ–Ω
                try:
                    logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞: {CITIES[city]}...")
                    # –ù–∞–π—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                    # –ü—Ä–∏–º–µ—Ä XPath, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π!
                    location_input = wait.until(EC.visibility_of_element_located((By.XPATH, "//input[contains(@placeholder, '–õ—é–±–æ–π —Ä–µ–≥–∏–æ–Ω') or contains(@placeholder, '–∞–¥—Ä–µ—Å')]")))
                    location_input.click() # –ö–ª–∏–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    await asyncio.sleep(0.3)
                    location_input.clear()
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –≥–æ—Ä–æ–¥–∞ –±–µ–∑ —ç–º–æ–¥–∑–∏
                    city_name_only = CITIES[city].split(" ")[1]
                    location_input.send_keys(city_name_only)
                    logger.info(f"–í–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: {city_name_only}")
                    await asyncio.sleep(1.5) # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫

                    # –ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
                    # –ü—Ä–∏–º–µ—Ä XPath, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π!
                    suggestion_xpath = f"//div[contains(@class, 'classifieds-filter-location__item') and contains(., '{city_name_only}')] | //li[contains(., '{city_name_only}') and contains(@class, 'suggest')]"
                    city_suggestion = wait.until(EC.element_to_be_clickable((By.XPATH, suggestion_xpath)))
                    city_suggestion.click()
                    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name_only}.")
                    await asyncio.sleep(1.5) # –ñ–¥–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

                except (TimeoutException, NoSuchElementException) as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –≥–æ—Ä–æ–¥–∞ Onliner –¥–ª—è {CITIES[city]}: {e}. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞.")
                except Exception as e:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ Onliner: {e}", exc_info=True)


            # --- –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
            try:
                 # –ñ–¥–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä!)
                 # –ü—Ä–∏–º–µ—Ä CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                results_container_selector = "div.classifieds__list" # –∏–ª–∏ "div#resultsTable" –∏ —Ç.–ø.
                wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, results_container_selector)))
                 # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                 # –ü—Ä–∏–º–µ—Ä CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                ad_link_selector = "a.classified" # –∏–ª–∏ "a.result__link" –∏ —Ç.–ø.
                wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ad_link_selector)))
                logger.info("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
                await asyncio.sleep(2) # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –Ω–∞ —Å–ª—É—á–∞–π –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏—Å–∫–∞
            except TimeoutException:
                 logger.warning(f"–¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Onliner –¥–ª—è {CITIES[city]} –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏. –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å.")
                 # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
                 # –í–∞–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ `try...finally` –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                 if driver: driver.quit()
                 return results # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫


            # --- –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π ---
            soup = BeautifulSoup(driver.page_source, "html.parser")
            # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã/—Å—Å—ã–ª–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ
            # –ü—Ä–∏–º–µ—Ä CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π!
            ad_elements = soup.select("div.classifieds__item div.classified") # –∏–ª–∏ "li.result" –∏ —Ç.–ø.
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(ad_elements)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Onliner –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")

            count = 0
            for ad_element in ad_elements:
                 if count >= ONLINER_LIMIT:
                     logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {ONLINER_LIMIT} –¥–ª—è Onliner ({CITIES[city]}).")
                     break
                 try:
                     # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                     # –ü—Ä–∏–º–µ—Ä CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π!
                     link_tag = ad_element.select_one("a.classified__link")
                     link = link_tag.get("href") if link_tag else None
                     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–µ–¥–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–≤–∞—Ä—Ç–∏—Ä—ã
                     if not link or not link.startswith("/ak/apartments/"): continue

                     full_link = f"https://r.onliner.by{link}" # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π URL

                     # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∏
                     price = OnlinerParser._parse_price(ad_element)
                     room_count = OnlinerParser._parse_rooms(ad_element)

                     # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ç.–∫. Selenium —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª)
                     # if not OnlinerParser._check_filters(price, room_count, min_price, max_price, rooms):
                     #     continue

                     results.append({
                         "price": price,
                         "rooms": room_count,
                         "address": OnlinerParser._parse_address(ad_element),
                         "link": full_link,
                         "image": OnlinerParser._parse_image(ad_element),
                         "description": OnlinerParser._parse_description(ad_element),
                         "city": city, # –ì–æ—Ä–æ–¥ —Å—á–∏—Ç–∞–µ–º –≤–µ—Ä–Ω—ã–º –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                         "source": "Onliner",
                         "status": "approved",
                         "new": 1 # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ
                     })
                     count += 1
                 except Exception as e:
                      logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Onliner: {e}", exc_info=False)

            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –≤–∞–ª–∏–¥–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π Onliner –¥–ª—è {CITIES[city]}.")

        except TimeoutException:
             logger.error(f"–¢–∞–π–º-–∞—É—Ç –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π Selenium –¥–ª—è Onliner ({CITIES[city]}).")
        except Exception as e:
             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ/–ø–∞—Ä—Å–∏–Ω–≥–µ Onliner –¥–ª—è {CITIES[city]} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Selenium: {e}", exc_info=True)
        finally:
             if driver:
                 driver.quit()
                 logger.info("–ó–∞–∫—Ä—ã–ª–∏ Selenium WebDriver.")
        return results


    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ Onliner (—Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Ç—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!) ---
    @staticmethod
    def _parse_price(ad) -> Optional[int]:
        try:
            # –¶–µ–Ω–∞ –Ω–∞ –û–Ω–ª–∞–π–Ω–µ—Ä–µ —á–∞—Å—Ç–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∞, –∏—â–µ–º —á–∞—Å—Ç—å —Å USD
            # –ü—Ä–∏–º–µ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–∞, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π!
            price_container = ad.select_one(".classified__price-value")
            if price_container:
                # –ò—â–µ–º —Å–ø–∞–Ω —Å —Ü–µ–Ω–æ–π –≤ $
                usd_price_span = price_container.select_one("span:nth-of-type(1)") # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —Å–ø–∞–Ω - —Ü–µ–Ω–∞ –≤ USD
                if usd_price_span:
                    price_text = usd_price_span.text.strip()
                    # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª '$', –ø—Ä–æ–±–µ–ª—ã –∏ —Ç.–¥., –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
                    price_str = re.sub(r"[^\d]", "", price_text.split('&')[0]) # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
                    return int(price_str) if price_str else None
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—É Onliner: {e}")
        return None

    @staticmethod
    def _parse_rooms(ad) -> Optional[int]:
        try:
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–∞—Ö –≤ –æ–ø–∏—Å–∞–Ω–∏–∏/–∑–∞–≥–æ–ª–æ–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            # –ü—Ä–∏–º–µ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–∞, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π!
            caption_element = ad.select_one(".classified__caption") # –∏–ª–∏ ".result__header"
            if caption_element:
                # –ü—Ä–∏–º–µ—Ä: "1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞"
                match = re.search(r"(\d+)[-\s]–∫–æ–º–Ω–∞—Ç", caption_element.text)
                if match:
                    return int(match.group(1))
                if "—Å—Ç—É–¥–∏—è" in caption_element.text.lower():
                    return 0 # –ò–ª–∏ 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç Onliner: {e}")
        return None

    @staticmethod
    def _parse_address(ad) -> str:
        try:
            # –ê–¥—Ä–µ—Å —á–∞—Å—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—É
            # –ü—Ä–∏–º–µ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–∞, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π!
            address_element = ad.select_one(".classified__plain-text a[href*='/maps/'] span") # –∏–ª–∏ ".address"
            if address_element:
                return address_element.text.strip()
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Å–ø–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
            address_container = ad.select_one(".classified__plain-text")
            if address_container:
                 # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç, –∏–∑–±–µ–≥–∞—è —Ç–µ–≥–æ–≤ script/style
                 return address_container.get_text(separator=" ", strip=True).split(',')[0] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –∫–∞–∫ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
        except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∞–¥—Ä–µ—Å Onliner: {e}")
        return "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω üè†"

    @staticmethod
    def _parse_image(ad) -> Optional[str]:
        try:
            # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            # –ü—Ä–∏–º–µ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–∞, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π!
            image_element = ad.select_one(".classified__photo img") # –∏–ª–∏ "img.result__image"
            if image_element:
                src = image_element.get("src") or image_element.get("data-src")
                if src and src.startswith('http'): # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                    return src
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Onliner: {e}")
        return None

    @staticmethod
    def _parse_description(ad) -> str:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫/–æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–∏
        try:
             # –ü—Ä–∏–º–µ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–∞, –∏—â–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π!
             desc_element = ad.select_one(".classified__caption")
             if desc_element:
                 title = desc_element.select_one("span") # –ß–∞—Å—Ç–æ –∑–¥–µ—Å—å –∫–æ–º–Ω–∞—Ç—ã
                 area_info = desc_element.select_one(".classified__caption-item_area") # –ü—Ä–∏–º–µ—Ä: –ø–æ–ª—É—á–∏—Ç—å –ø–ª–æ—â–∞–¥—å
                 # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–µ–π
                 text_parts = [t for t in [title.text.strip() if title else None, area_info.text.strip() if area_info else None] if t]
                 return ", ".join(text_parts) if text_parts else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ üìù"
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ Onliner: {e}")
        return "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ üìù"

    @staticmethod
    def _check_filters(price: Optional[int], rooms: Optional[int], min_price: Optional[int], max_price: Optional[int], target_rooms: Optional[int]) -> bool:
        # –¢–∞ –∂–µ –ª–æ–≥–∏–∫–∞, —á—Ç–æ –∏ —É Kufar, –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        if price is None: return False
        price_valid = (min_price is None or price >= min_price) and \
                      (max_price is None or price <= max_price)
        rooms_valid = True
        if target_rooms is not None:
            if rooms is None: rooms_valid = False
            elif rooms != target_rooms: rooms_valid = False
        return price_valid and rooms_valid

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
def store_ads(ads: List[Dict]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ë–î, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ link."""
    if not ads:
        return 0 # –ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
    inserted_count = 0 # –°—á–µ—Ç—á–∏–∫ —Ä–µ–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    with sqlite3.connect(DATABASE_NAME) as conn:
        cursor = conn.cursor()
        for ad in ads:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ —Å—Å—ã–ª–∫–∏ - –æ–Ω–∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã
            if not ad.get("link"):
                 logger.warning("–ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å—Å—ã–ª–∫–∏.")
                 continue
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT OR IGNORE –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ PRIMARY KEY 'link'
                # –§–ª–∞–≥ 'new' —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ 1 —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–π –≤—Å—Ç–∞–≤–∫–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è (CURRENT_TIMESTAMP –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                cursor.execute(
                     """
                     INSERT OR IGNORE INTO ads (link, source, city, price, rooms, address, image, description, status, new, user_id, phone)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 1, ?, ?)
                     """,
                    (
                        ad.get("link"), ad.get("source"), ad.get("city"), ad.get("price"), ad.get("rooms"),
                        ad.get("address"), ad.get("image"), ad.get("description"),
                        ad.get("status", "approved"), # –°—Ç–∞—Ç—É—Å 'approved' –¥–ª—è —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö
                        ad.get("user_id"), ad.get("phone") # –ë—É–¥—É—Ç None –¥–ª—è —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö
                    )
                )
                # rowcount > 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤—Å—Ç–∞–≤–∫–∞ (–∞ –Ω–µ ignore)
                if cursor.rowcount > 0:
                     inserted_count += 1
            except sqlite3.Error as e:
                 # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ë–î, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ ON CONFLICT
                 logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad.get('link')}: {e}")
            except Exception as e:
                 # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º ad)
                 logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {ad.get('link')}: {e}", exc_info=True)
        conn.commit() # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {len(ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {inserted_count} –Ω–æ–≤—ã—Ö.")
    return inserted_count

# --- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ ---
async def fetch_and_store_ads():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤."""
    logger.info("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
    total_new_ads_found = 0
    for city_key in CITIES.keys():
        logger.info(f"--- –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞: {CITIES[city_key]} ---")
        kufar_ads = []
        onliner_ads = []

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å Kufar
        try:
            # –î–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±—â–µ–≥–æ —Å–±–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∏–ª–∏ —Å –±–∞–∑–æ–≤—ã–º–∏)
            kufar_ads = await ApartmentParser.fetch_ads(city_key)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(kufar_ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å Kufar –¥–ª—è {CITIES[city_key]}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–æ–ª—É—á–µ–Ω–∏—è Kufar –¥–ª—è {CITIES[city_key]}: {e}", exc_info=True)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å Onliner (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
        try:
            onliner_ads = await asyncio.to_thread(OnlinerParser.fetch_ads, city_key)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(onliner_ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å Onliner –¥–ª—è {CITIES[city_key]}")
        except Exception as e:
             logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–æ–ª—É—á–µ–Ω–∏—è Onliner –¥–ª—è {CITIES[city_key]}: {e}", exc_info=True)

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        all_ads_for_city = kufar_ads + onliner_ads
        if all_ads_for_city:
             inserted_count = store_ads(all_ads_for_city)
             total_new_ads_found += inserted_count
             logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è {CITIES[city_key]}. –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {inserted_count}")
        else:
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è {CITIES[city_key]} –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.")

        await asyncio.sleep(3) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–∞–π—Ç—ã

    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω —Ü–∏–∫–ª –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total_new_ads_found}")


# --- API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã ---
@app.route('/api/ads', methods=['GET'])
def get_ads_api():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    city = request.args.get('city') # –ö–ª—é—á –≥–æ—Ä–æ–¥–∞ (minsk, brest, ...)
    min_price = request.args.get('min_price', type=int)
    max_price = request.args.get('max_price', type=int)
    rooms_str = request.args.get('rooms')
    rooms = int(rooms_str) if rooms_str and rooms_str.isdigit() else None

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—Å–º–µ—â–µ–Ω–∏—è) –¥–ª—è "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π" –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏–ª–∏ "–∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
    kufar_offset = request.args.get('kufar_offset', default=0, type=int)
    onliner_offset = request.args.get('onliner_offset', default=0, type=int)
    user_offset = request.args.get('user_offset', default=0, type=int)

    # –õ–∏–º–∏—Ç—ã: —Å–∫–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –∏ –ø—Ä–∏ "–∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
    initial_limit = 7 # –ë–æ–ª—å—à–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    load_more_limit = 5 # –ú–µ–Ω—å—à–µ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö

    kufar_limit = initial_limit if kufar_offset == 0 else load_more_limit
    onliner_limit = initial_limit if onliner_offset == 0 else load_more_limit
    user_limit = initial_limit if user_offset == 0 else load_more_limit

    try:
        with sqlite3.connect(DATABASE_NAME) as conn:
            conn.row_factory = sqlite3.Row # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–∏
            cursor = conn.cursor()

            # –ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            base_query = "FROM ads WHERE status = 'approved'"
            params = [] # –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–∞

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if city and city in CITIES: # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –≤–∞–ª–∏–¥–Ω—ã–º –∫–ª—é—á–∞–º –≥–æ—Ä–æ–¥–æ–≤
                base_query += " AND city = ?"
                params.append(city)
            if min_price is not None:
                base_query += " AND price >= ?"
                params.append(min_price)
            if max_price is not None:
                base_query += " AND price <= ?"
                params.append(max_price)
            if rooms is not None:
                base_query += " AND rooms = ?"
                params.append(rooms)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Kufar
            kufar_query = f"SELECT * {base_query} AND source = 'Kufar' ORDER BY created_at DESC LIMIT ? OFFSET ?"
            cursor.execute(kufar_query, params + [kufar_limit, kufar_offset])
            kufar_ads = [dict(row) for row in cursor.fetchall()]

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Onliner
            onliner_query = f"SELECT * {base_query} AND source = 'Onliner' ORDER BY created_at DESC LIMIT ? OFFSET ?"
            cursor.execute(onliner_query, params + [onliner_limit, onliner_offset])
            onliner_ads = [dict(row) for row in cursor.fetchall()]

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π User
            user_query = f"SELECT * {base_query} AND source = 'User' ORDER BY created_at DESC LIMIT ? OFFSET ?"
            cursor.execute(user_query, params + [user_limit, user_offset])
            user_ads = [dict(row) for row in cursor.fetchall()]

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º)
            # –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: Kufar, –∑–∞—Ç–µ–º Onliner, –∑–∞—Ç–µ–º User
            result_ads = kufar_ads + onliner_ads + user_ads

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –µ—â–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–º–µ—â–µ–Ω–∏—è + –ª–∏–º–∏—Ç–∞
            kufar_has_more_query = f"SELECT 1 {base_query} AND source = 'Kufar' LIMIT 1 OFFSET ?"
            cursor.execute(kufar_has_more_query, params + [kufar_offset + len(kufar_ads)]) # –ò—Å–ø–æ–ª—å–∑—É–µ–º len(kufar_ads) —Ç.–∫. —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞
            kufar_has_more = cursor.fetchone() is not None

            onliner_has_more_query = f"SELECT 1 {base_query} AND source = 'Onliner' LIMIT 1 OFFSET ?"
            cursor.execute(onliner_has_more_query, params + [onliner_offset + len(onliner_ads)])
            onliner_has_more = cursor.fetchone() is not None

            user_has_more_query = f"SELECT 1 {base_query} AND source = 'User' LIMIT 1 OFFSET ?"
            cursor.execute(user_has_more_query, params + [user_offset + len(user_ads)])
            user_has_more = cursor.fetchone() is not None

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response = {
                "ads": result_ads,
                "next_offsets": { # –°–ª–µ–¥—É—é—â–∏–µ —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                    "kufar": kufar_offset + len(kufar_ads) if kufar_has_more else None, # None –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç
                    "onliner": onliner_offset + len(onliner_ads) if onliner_has_more else None,
                    "user": user_offset + len(user_ads) if user_has_more else None,
                },
                "has_more": kufar_has_more or onliner_has_more or user_has_more # –û–±—â–∏–π —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –¥–æ–ø. –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            }

            return jsonify(response)

    except sqlite3.Error as e:
         logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ /api/ads: {e}")
         return jsonify({"error": "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"}), 500
    except Exception as e:
         logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ /api/ads: {e}", exc_info=True)
         return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500


@app.route('/api/new_ads_count', methods=['GET'])
def get_new_ads_count_api():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π."""
    user_id = request.args.get('user_id') # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        with sqlite3.connect(DATABASE_NAME) as conn:
            cursor = conn.cursor()
            # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ
            cursor.execute("SELECT COUNT(*) FROM ads WHERE status = 'approved' AND new = 1")
            count = cursor.fetchone()[0]
            return jsonify({"count": count})
    except sqlite3.Error as e:
         logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ /api/new_ads_count: {e}")
         return jsonify({"error": "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"}), 500
    except Exception as e:
         logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ /api/new_ads_count: {e}", exc_info=True)
         return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500


@app.route('/api/mark_ads_viewed', methods=['POST'])
def mark_ads_viewed_api():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ 'new' –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π."""
    user_id = request.args.get('user_id') # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        with sqlite3.connect(DATABASE_NAME) as conn:
            cursor = conn.cursor()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ
            cursor.execute("UPDATE ads SET new = 0 WHERE status = 'approved' AND new = 1")
            updated_count = cursor.rowcount # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            conn.commit()
            logger.info(f"–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ {updated_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
            return jsonify({"message": f"{updated_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"}), 200
    except sqlite3.Error as e:
         logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ /api/mark_ads_viewed: {e}")
         return jsonify({"error": "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"}), 500
    except Exception as e:
         logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ /api/mark_ads_viewed: {e}", exc_info=True)
         return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500


@app.route('/api/submit_user_ad', methods=['POST'])
def submit_user_ad_api():
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # --- –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã ---
    user_id = request.form.get('user_id') # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ–ª–∂–µ–Ω –µ–≥–æ –ø–µ—Ä–µ–¥–∞—Ç—å)
    city = request.form.get('city')
    rooms_str = request.form.get('rooms')
    price_str = request.form.get('price')
    address = request.form.get('address')
    description = request.form.get('description')
    phone = request.form.get('phone') # –¢–µ–ª–µ—Ñ–æ–Ω –≤–∞–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π

    errors = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if not user_id: errors['user_id'] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è." # –î–æ–ª–∂–µ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑ Telegram WebApp InitData
    if not city or city not in CITIES: errors['city'] = "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—ã–π –≥–æ—Ä–æ–¥."
    if not rooms_str or not rooms_str.isdigit() or not (0 <= int(rooms_str) <= 10): errors['rooms'] = "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (0-10)."
    if not price_str or not price_str.isdigit() or int(price_str) <= 0: errors['price'] = "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É."
    if not address or len(address) < 5: errors['address'] = "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å (–º–∏–Ω. 5 —Å–∏–º–≤–æ–ª–æ–≤)."
    if not description or len(description) < 10: errors['description'] = "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω. 10 —Å–∏–º–≤–æ–ª–æ–≤)."
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ü–∏—Ñ—Ä—ã, –≤–æ–∑–º–æ–∂–Ω–æ +, —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã)
    if not phone or not re.match(r"^[\d\+\-\(\)\s]+$", phone) or len(phone) < 7: errors['phone'] = "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."

    images = request.files.getlist('images') # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    # if not images: errors['images'] = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ." # –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º?

    if errors:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {errors}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", "details": errors}), 400 # 400 Bad Request

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    rooms = int(rooms_str)
    price = int(price_str)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
    image_paths = [] # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –ë–î
    MAX_IMAGES = 5 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if len(images) > MAX_IMAGES:
         logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–º–∞–∫—Å. {MAX_IMAGES}).")
         return jsonify({"error": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", "details": {"images": f"–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ {MAX_IMAGES} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."}}), 400


    for image in images:
        if image and image.filename and allowed_file(image.filename):
            # –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
            original_filename = secure_filename(image.filename)
            ext = original_filename.rsplit('.', 1)[1].lower()
            unique_filename = f"{uuid.uuid4()}.{ext}"
            try:
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
                # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                # TODO: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∂–∞—Ç–∏–µ/–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                image.save(filepath)
                image_paths.append(f"/{UPLOAD_FOLDER}/{unique_filename}") # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL-–ø—É—Ç—å
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filepath}")
            except Exception as e:
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {original_filename}: {e}")
                 # –†–µ—à–∏—Ç—å, –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –ª–∏ –≤—Å—é –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                 return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}), 500
        elif image and image.filename:
             # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–º —Ç–∏–ø–µ —Ñ–∞–π–ª–∞
             logger.warning(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ç–∏–ø–∞: {image.filename}")
             # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ 'errors' –∏ –≤–µ—Ä–Ω—É—Ç—å 400

    # --- –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ---
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    ad_link = f"user_ad_{uuid.uuid4()}"

    ad = {
        "link": ad_link,
        "source": "User",
        "city": city,
        "price": price,
        "rooms": rooms,
        "address": address,
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON-—Å–ø–∏—Å–æ–∫)
        "image": image_paths[0] if image_paths else None,
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ–ª–µ JSON)
        "description": description,
        "status": "pending", # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        "new": 0, # –ù–µ —Å—á–∏—Ç–∞—é—Ç—Å—è '–Ω–æ–≤—ã–º–∏' —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞
        "user_id": user_id,
        "phone": phone
    }

    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ---
    try:
        with sqlite3.connect(DATABASE_NAME) as conn:
             cursor = conn.cursor()
             # –ò—Å–ø–æ–ª—å–∑—É–µ–º CURRENT_TIMESTAMP –¥–ª—è created_at
             cursor.execute(
                """
                INSERT INTO ads (link, source, city, price, rooms, address, image, description, status, new, user_id, phone, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
                """,
                (ad["link"], ad["source"], ad["city"], ad["price"], ad["rooms"], ad["address"], ad["image"], ad["description"], ad["status"], ad["new"], ad["user_id"], ad["phone"])
             )
             conn.commit()
             logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_link} –æ—Ç {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
             # TODO: –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –æ–∂–∏–¥–∞—é—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
             return jsonify({"status": "pending", "message": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚úÖ"}), 201 # 201 Created

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad_link}: {e}")
        # –£–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ –≤ –ë–î –Ω–µ —É–¥–∞–ª–∞—Å—å?
        for img_path in image_paths:
             try: os.remove(img_path.lstrip('/'))
             except OSError: pass
        return jsonify({"error": "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ"}), 500
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad_link}: {e}", exc_info=True)
        # –û—á–∏—Å—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for img_path in image_paths:
             try: os.remove(img_path.lstrip('/'))
             except OSError: pass
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ"}), 500


# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–¢—Ä–µ–±—É—é—Ç –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏/–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!) ---
# –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ–±—ã —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –∏—Ö –≤—ã–∑—ã–≤–∞—Ç—å.
def is_user_admin(user_id):
     """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–ó–ê–ì–õ–£–®–ö–ê)."""
     # Placeholder: –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–æ–≤ –≤ –ë–î/–∫–æ–Ω—Ñ–∏–≥–µ)
     # –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–æ–ª–∞–≥–∞–π—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ user_id, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç–æ–º, –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏—é Telegram InitData)
     ADMIN_IDS = os.environ.get("ADMIN_IDS", "").split(',') # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
     logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {ADMIN_IDS}")
     return str(user_id) in ADMIN_IDS

@app.route('/api/moderate_ad', methods=['POST'])
def moderate_ad_api():
    """–û–¥–æ–±—Ä—è–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ."""
    ad_link = request.args.get('link') # –ò—Å–ø–æ–ª—å–∑—É–µ–º link –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    action = request.args.get('action') # 'approve' –∏–ª–∏ 'reject'
    moderator_id = request.args.get('moderator_id') # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–ø–æ–ª–Ω—è—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ

    # ---> !! –í–ê–ñ–ù–û: –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ !! <---
    if not moderator_id or not is_user_admin(moderator_id):
         logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad_link} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {moderator_id}")
         return jsonify({"error": "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø"}), 403 # 403 Forbidden

    if not ad_link or not action or action not in ['approve', 'reject']:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'link' –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä 'action'"}), 400

    try:
        with sqlite3.connect(DATABASE_NAME) as conn:
            cursor = conn.cursor()
            if action == 'approve':
                 # –ü—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ '–Ω–æ–≤–æ–µ', —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –µ–≥–æ —É–≤–∏–¥–µ–ª–∏
                cursor.execute("UPDATE ads SET status = 'approved', new = 1 WHERE link = ? AND status = 'pending'", (ad_link,))
                message = "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–æ–≤–æ–µ."
            elif action == 'reject':
                # –í–∞—Ä–∏–∞–Ω—Ç 1: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å 'rejected' (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å)
                # cursor.execute("UPDATE ads SET status = 'rejected' WHERE link = ? AND status = 'pending'", (ad_link,))
                # –í–∞—Ä–∏–∞–Ω—Ç 2: –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                cursor.execute("DELETE FROM ads WHERE link = ? AND status = 'pending'", (ad_link,))
                message = "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ/—É–¥–∞–ª–µ–Ω–æ."

            if cursor.rowcount == 0:
                 # –í–∞–∂–Ω–æ: commit –Ω—É–∂–µ–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                 conn.commit()
                 logger.warning(f"–î–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ '{action}' –Ω–∞–¥ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º {ad_link} –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 'pending'?).")
                 return jsonify({"error": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è"}), 404 # 404 Not Found
            else:
                conn.commit()
                logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_link} –±—ã–ª–æ '{action}' –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {moderator_id}.")
                 # TODO: –£–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (ad['user_id']) –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞?
                return jsonify({"message": message}), 200 # 200 OK

    except sqlite3.Error as e:
         logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad_link}: {e}")
         return jsonify({"error": "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"}), 500
    except Exception as e:
         logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad_link}: {e}", exc_info=True)
         return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

@app.route('/api/pending_ads', methods=['GET'])
def get_pending_ads_api():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
    admin_id = request.args.get('admin_id')
    # ---> !! –í–ê–ñ–ù–û: –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ !! <---
    if not admin_id or not is_user_admin(admin_id):
         logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {admin_id}")
         return jsonify({"error": "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø"}), 403

    try:
        with sqlite3.connect(DATABASE_NAME) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM ads WHERE source = 'User' AND status = 'pending' ORDER BY created_at ASC") # –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ
            ads = [dict(row) for row in cursor.fetchall()]
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –∑–∞–ø—Ä–æ—Å–∏–ª {len(ads)} –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
            return jsonify(ads)
    except sqlite3.Error as e:
         logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
         return jsonify({"error": "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"}), 500
    except Exception as e:
         logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}", exc_info=True)
         return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

# --- –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ ---
@app.route(f'/{UPLOAD_FOLDER}/<path:filename>')
def serve_uploaded_file(filename):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ UPLOAD_FOLDER."""
    logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–¥–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {filename}")
    try:
        # send_from_directory –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–∞–ø–∫–∏
        return send_from_directory(app.config['UPLOAD_FOLDER'], filename)
    except FileNotFoundError:
        logger.warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
        abort(404) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 404 –æ—à–∏–±–∫—É

# –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ HTML —Ñ–∞–π–ª–∞ Mini App
@app.route('/mini-app')
def mini_app_route():
    """–û—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π index.html –¥–ª—è Mini App."""
    logger.info("–ó–∞–ø—Ä–æ—Å —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ Mini App (/mini-app)")
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–±–æ—Ä–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (../client/build –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞)
    build_dir = app.static_folder # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π static_folder
    if not build_dir or not os.path.exists(os.path.join(build_dir, 'index.html')):
        logger.error(f"–§–∞–π–ª index.html –¥–ª—è Mini App –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞–µ–º–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {build_dir}")
        return "–û—à–∏–±–∫–∞: –§—Ä–æ–Ω—Ç–µ–Ω–¥ Mini App –Ω–µ –Ω–∞–π–¥–µ–Ω.", 404
    return send_from_directory(build_dir, 'index.html')

# –ú–∞—Ä—à—Ä—É—Ç-"–ª–æ–≤—É—à–∫–∞" –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, React Router)
@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def serve_react_app(path):
    """–û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–±–æ—Ä–∫–∏ –∏–ª–∏ index.html –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏."""
    build_dir = app.static_folder
    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–º—É —Ñ–∞–π–ª—É
    static_file_path = os.path.join(build_dir, path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É –ø—É—Ç–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª (css, js, png –∏ —Ç.–¥.)
    if path != "" and os.path.exists(static_file_path) and os.path.isfile(static_file_path):
        logger.debug(f"–û—Ç–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞: {path}")
        return send_from_directory(build_dir, path)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª, –æ—Ç–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π index.html –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        logger.debug(f"–ü—É—Ç—å '{path}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–∞–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª, –æ—Ç–¥–∞–µ–º index.html –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏.")
        index_path = os.path.join(build_dir, 'index.html')
        if not os.path.exists(index_path):
             logger.error(f"–§–∞–π–ª index.html –¥–ª—è Mini App –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {build_dir}")
             return "–û—à–∏–±–∫–∞: –§—Ä–æ–Ω—Ç–µ–Ω–¥ Mini App –Ω–µ –Ω–∞–π–¥–µ–Ω.", 404
        return send_from_directory(build_dir, 'index.html')


# --- –ö–ª–∞—Å—Å Telegram –ë–æ—Ç–∞ ---
class ApartmentBot:
    def __init__(self):
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞.")
        if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "YOUR_FALLBACK_TOKEN":
             logger.error("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.")
             raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Application Builder (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–π–º–∞—É—Ç—ã)
        app_builder = Application.builder().token(TELEGRAM_TOKEN)
        # app_builder.connect_timeout(10).read_timeout(20) # –ü—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤

        self.application = app_builder.build()
        self._setup_handlers() # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        logger.info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
        self.application.add_handler(CommandHandler("start", self.start))
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")

    async def _setup_commands(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ Telegram."""
        commands = [
            BotCommand("start", "–û—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä üè†"),
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç–µ –∏—Ö
        ]
        try:
            await self.application.bot.set_my_commands(commands)
            logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        except Exception as e:
            # –û—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã, –Ω–æ —Å—Ç–æ–∏—Ç –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}", exc_info=True)

    async def start(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        user = update.effective_user
        user_id = user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user_id}) –≤—ã–∑–≤–∞–ª /start.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è URL –¥–ª—è Web App
        if not WEB_APP_URL or WEB_APP_URL == "https://YOUR_APP_DOMAIN/mini-app":
            logger.error("URL –¥–ª—è Web App (WEB_APP_URL) –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É.")
            try:
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. üõ†Ô∏è"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π Web App
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä",
                web_app=WebAppInfo(url=WEB_APP_URL) # –ò—Å–ø–æ–ª—å–∑—É–µ–º WebAppInfo
            )]
        ])
        try:
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —É–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –∞—Ä–µ–Ω–¥—É.",
                reply_markup=keyboard
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π WebApp –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)

    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç polling –±–æ—Ç–∞."""
        logger.info("–ó–∞–ø—É—Å–∫ polling Telegram –±–æ—Ç–∞...")
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
        await self._setup_commands()
        try:
            # –ó–∞–ø—É—Å–∫ polling (allowed_updates=None - –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
            # drop_pending_updates=True - –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–∫–∞ –±–æ—Ç –±—ã–ª –æ—Ñ—Ñ–ª–∞–π–Ω
            await self.application.run_polling(allowed_updates=None, drop_pending_updates=True)
            logger.info("Polling –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —à—Ç–∞—Ç–Ω–æ.")
        except Exception as e:
            logger.error(f"Polling –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}", exc_info=True)
            # –†–µ—à–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            raise # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏

# --- –ó–∞–ø—É—Å–∫ –í–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---
async def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä Flask —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Hypercorn."""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 5000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    port = int(os.environ.get('PORT', 5000))
    config = Config()
    # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ 0.0.0.0 –¥–µ–ª–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏–∑–≤–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Docker/Render)
    config.bind = [f"0.0.0.0:{port}"]
    # –í–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞ Flask –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    config.debug = os.environ.get('FLASK_DEBUG', 'False').lower() == 'true'
    logger.info(f"–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ —Å Hypercorn –Ω–∞ –ø–æ—Ä—Ç—É {port}. Debug —Ä–µ–∂–∏–º: {config.debug}")
    try:
        await hypercorn.asyncio.serve(app, config)
        logger.info("Flask —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}", exc_info=True)
        raise # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏

# --- –û—Å–Ω–æ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ---
async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(UPLOAD_FOLDER):
        os.makedirs(UPLOAD_FOLDER)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫: {UPLOAD_FOLDER}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    try:
         # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)
         minsk_tz = pytz.timezone("Europe/Minsk")
         scheduler = AsyncIOScheduler(timezone=minsk_tz)
         # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º. `replace_existing=True` –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É —Å —Ç–µ–º –∂–µ ID.
         # `misfire_grace_time` - –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏.
         scheduler.add_job(
             fetch_and_store_ads,
             'interval',
             minutes=PARSE_INTERVAL,
             id='fetch_ads_job',
             replace_existing=True,
             misfire_grace_time=600 # 10 –º–∏–Ω—É—Ç
         )
         # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ç.–∫. –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)
         # scheduler.add_job(fetch_and_store_ads, 'date', run_date=datetime.now(minsk_tz))
         scheduler.start()
         logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥–∞: {PARSE_INTERVAL} –º–∏–Ω—É—Ç.")
    except Exception as e:
         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}", exc_info=True)
         return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É, –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–æ—Ç–∞
    try:
        bot = ApartmentBot()
    except ValueError as e: # –õ–æ–≤–∏–º –æ—à–∏–±–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞: {e}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
         if scheduler.running: scheduler.shutdown()
         return # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}", exc_info=True)
        if scheduler.running: scheduler.shutdown()
        return

    # –ó–∞–ø—É—Å–∫ Flask –∏ –ë–æ—Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ
    logger.info("–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –∏ Telegram –±–æ—Ç–∞...")
    flask_task = asyncio.create_task(run_flask(), name="FlaskTask")
    bot_task = asyncio.create_task(bot.run(), name="BotTask")

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–¥–Ω–æ–π –∏–∑ –∑–∞–¥–∞—á (–∏–ª–∏ –æ–±–µ–∏—Ö)
    done, pending = await asyncio.wait(
        [flask_task, bot_task],
        return_when=asyncio.FIRST_COMPLETED, # –ñ–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏)
    for task in done:
        task_name = task.get_name()
        try:
            result = await task # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_name} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —à—Ç–∞—Ç–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {result}")
        except Exception as e:
            logger.error(f"–ó–∞–¥–∞—á–∞ {task_name} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}", exc_info=True)

    # –û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á
    logger.info("–û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á...")
    for task in pending:
        task_name = task.get_name()
        logger.info(f"–û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É {task_name}...")
        task.cancel()
        try:
            await task # –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–º–µ–Ω—É
        except asyncio.CancelledError:
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception as e:
             # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫—à–∏–µ –≤–æ –≤—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã
             logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ {task_name}: {e}", exc_info=True)

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    if scheduler.running:
         logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
         scheduler.shutdown()
         logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (KeyboardInterrupt).")
    except Exception as e:
         # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫, –Ω–µ –ø–æ–π–º–∞–Ω–Ω—ã—Ö –≤ main()
         logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}", exc_info=True)