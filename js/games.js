// js/games.js
class GameManager {
    static playSound(soundFile) {
        if (settings.soundEnabled) {
            const audio = new Audio(`assets/sounds/${soundFile}`);
            audio.play().catch(() => console.error('Error playing sound:', soundFile));
        }
    }

    static async notifyWin(userId, message) {
        try {
            await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: userId,
                    text: message
                })
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }

    static startGame(gameId) {
        const gameTiles = document.getElementById('game-tiles');
        if (!gameTiles) {
            console.error('Game tiles container not found!');
            return;
        }
        if (gameId === 'slots') {
            gameTiles.innerHTML = `
                <div class="game-screen">
                    <h2>–°–ª–æ—Ç—ã</h2>
                    <div class="game-content">
                        <p id="slot-result">–ù–∞–∂–º–∏ "–°–ø–∏–Ω"!</p>
                        <button onclick="GameManager.spinSlots()">–°–ø–∏–Ω (‚≠ê 10)</button>
                        <button class="back-btn" onclick="renderMainScreen()">–ù–∞–∑–∞–¥</button>
                    </div>
                </div>
            `;
        } else if (gameId === 'roulette') {
            gameTiles.innerHTML = `
                <div class="game-screen">
                    <h2>–†—É–ª–µ—Ç–∫–∞</h2>
                    <div class="game-content">
                        <p id="roulette-result">–°–¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É!</p>
                        <input type="number" id="roulette-bet" placeholder="–°—Ç–∞–≤–∫–∞ (–º–∏–Ω. 10)" min="10">
                        <button onclick="GameManager.spinRoulette()">–ö—Ä—É—Ç–∏—Ç—å</button>
                        <button class="back-btn" onclick="renderMainScreen()">–ù–∞–∑–∞–¥</button>
                    </div>
                </div>
            `;
        } else if (gameId === 'blackjack') {
            gameTiles.innerHTML = `
                <div class="game-screen">
                    <h2>–ë–ª—ç–∫–¥–∂–µ–∫</h2>
                    <div class="game-content">
                        <p id="blackjack-result">–ù–∞–∂–º–∏ "–ò–≥—Ä–∞—Ç—å"!</p>
                        <button onclick="GameManager.playBlackjack()">–ò–≥—Ä–∞—Ç—å (‚≠ê 20)</button>
                        <button class="back-btn" onclick="renderMainScreen()">–ù–∞–∑–∞–¥</button>
                    </div>
                </div>
            `;
        } else if (gameId === 'wheel') {
            gameTiles.innerHTML = `
                <div class="game-screen">
                    <h2>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</h2>
                    <div class="game-content">
                        <p id="wheel-result">–ö—Ä—É—Ç–∏ –∫–æ–ª–µ—Å–æ!</p>
                        <button onclick="GameManager.spinWheel()">–ö—Ä—É—Ç–∏—Ç—å (‚≠ê 5)</button>
                        <button class="back-btn" onclick="renderMainScreen()">–ù–∞–∑–∞–¥</button>
                    </div>
                </div>
            `;
        }
    }

    static spinSlots() {
        if (user.balance < 10) {
            showModal('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars!');
            return;
        }
        user.balance -= 10;
        updateBalance();
        this.playSound('spin.mp3');
        const result = Math.random() > 0.5 ? '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ‚≠ê 20!' : '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ!';
        if (result.includes('–≤—ã–∏–≥—Ä–∞–ª–∏')) {
            user.balance += 20;
            user.winHistory.push({ date: new Date().toLocaleString(), amount: 20, game: '–°–ª–æ—Ç—ã' });
            this.playSound('win.mp3');
            this.notifyWin(user.id, 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ‚≠ê 20 –≤ –°–ª–æ—Ç–∞—Ö!');
        } else {
            this.playSound('lose.mp3');
        }
        const slotResult = document.getElementById('slot-result');
        if (slotResult) {
            slotResult.textContent = result;
        }
        updateBalance();
        Storage.save('user', user);
    }

    static spinRoulette() {
        const betInput = document.getElementById('roulette-bet');
        if (!betInput) {
            console.error('Roulette bet input not found!');
            return;
        }
        const bet = parseInt(betInput.value);
        if (!bet || bet < 10 || bet > user.balance) {
            showModal('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞! –ú–∏–Ω–∏–º—É–º 10 Stars, –Ω–µ –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞.');
            return;
        }
        user.balance -= bet;
        updateBalance();
        this.playSound('spin.mp3');
        const result = Math.random() > 0.7 ? `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ‚≠ê ${bet * 2}!` : '–£–¥–∞—á–∞ –Ω–µ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!';
        if (result.includes('–≤—ã–∏–≥—Ä–∞–ª–∏')) {
            const winAmount = bet * 2;
            user.balance += winAmount;
            user.winHistory.push({ date: new Date().toLocaleString(), amount: winAmount, game: '–†—É–ª–µ—Ç–∫–∞' });
            this.playSound('win.mp3');
            this.notifyWin(user.id, `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ‚≠ê ${winAmount} –≤ –†—É–ª–µ—Ç–∫–µ!`);
        } else {
            this.playSound('lose.mp3');
        }
        const rouletteResult = document.getElementById('roulette-result');
        if (rouletteResult) {
            rouletteResult.textContent = result;
        }
        updateBalance();
        Storage.save('user', user);
    }

    static playBlackjack() {
        if (user.balance < 20) {
            showModal('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars!');
            return;
        }
        user.balance -= 20;
        updateBalance();
        this.playSound('spin.mp3');
        const playerScore = Math.floor(Math.random() * 11) + 10;
        const dealerScore = Math.floor(Math.random() * 11) + 10;
        let result;
        if (playerScore > 21) {
            result = '–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.';
            this.playSound('lose.mp3');
        } else if (dealerScore > 21 || playerScore > dealerScore) {
            result = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ‚≠ê 40! (–í–∞—à —Å—á–µ—Ç: ${playerScore}, –î–∏–ª–µ—Ä: ${dealerScore})`;
            user.balance += 40;
            user.winHistory.push({ date: new Date().toLocaleString(), amount: 40, game: '–ë–ª—ç–∫–¥–∂–µ–∫' });
            this.playSound('win.mp3');
            this.notifyWin(user.id, `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ‚≠ê 40 –≤ –ë–ª—ç–∫–¥–∂–µ–∫–µ!`);
        } else {
            result = `–ü—Ä–æ–∏–≥—Ä—ã—à! (–í–∞—à —Å—á–µ—Ç: ${playerScore}, –î–∏–ª–µ—Ä: ${dealerScore})`;
            this.playSound('lose.mp3');
        }
        const blackjackResult = document.getElementById('blackjack-result');
        if (blackjackResult) {
            blackjackResult.textContent = result;
        }
        updateBalance();
        Storage.save('user', user);
    }

    static spinWheel() {
        if (user.balance < 5) {
            showModal('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars!');
            return;
        }
        user.balance -= 5;
        updateBalance();
        this.playSound('spin.mp3');
        const prizes = [0, 10, 20, 50, 100];
        const prize = prizes[Math.floor(Math.random() * prizes.length)];
        const result = prize > 0 ? `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ‚≠ê ${prize}!` : '–ë–µ–∑ –ø—Ä–∏–∑–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ!';
        if (prize > 0) {
            user.balance += prize;
            user.winHistory.push({ date: new Date().toLocaleString(), amount: prize, game: '–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã' });
            this.playSound('win.mp3');
            this.notifyWin(user.id, `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ‚≠ê ${prize} –≤ –ö–æ–ª–µ—Å–µ –§–æ—Ä—Ç—É–Ω—ã!`);
        } else {
            this.playSound('lose.mp3');
        }
        const wheelResult = document.getElementById('wheel-result');
        if (wheelResult) {
            wheelResult.textContent = result;
        }
        updateBalance();
        Storage.save('user', user);
    }
}
